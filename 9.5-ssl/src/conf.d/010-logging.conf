# https://www.postgresql.org/docs/9.5/static/runtime-config-logging.html


# ################################################################################
# 18.8.1. WHERE TO LOG
#
log_destination = 'csvlog'
#log_destination = 'stderr'
#log_destination = 'syslog'
#log_destination = 'eventlog'
#log_destination = 'csvlog,stderr'


# This parameter enables the logging collector, which is a background process that
# captures log messages sent to stderr and redirects them into log files.
# This approach is often more useful than logging to syslog,
# since some types of messages might not appear in syslog output.
logging_collector = on

# When logging_collector is enabled, this parameter determines the directory in which
# log files will be created. It can be specified as an absolute path, or relative to the
# cluster data directory. This parameter can only be set in the postgresql.conf file or
# on the server command line. The default is pg_log.
log_directory = '/var/log/postgresql'

# When logging_collector is enabled, this parameter sets the file names of the created log files.
# The value is treated as a strftime pattern, so %-escapes can be used to specify time-varying file names.
# The supported %-escapes are similar to those listed in the Open Group's strftime specification.
# The default is postgresql-%Y-%m-%d_%H%M%S.log.
#
# If you specify a file name without escapes, you should plan to use a log rotation utility
# to avoid eventually filling the entire disk.
#
# If CSV-format output is enabled in log_destination, .csv will be appended to the
# timestamped log file name to create the file name for CSV-format output.
# (If log_filename ends in .log, the suffix is replaced instead.)
# log_filename = 'postgres.log'

#log_file_mode = 600

# When logging_collector is enabled, this parameter determines the
#     maximum lifetime of an individual log file.
# After this many minutes have elapsed, a new log file will be created.
# Set to zero to disable time-based creation of new log files.
log_rotation_age = 1440

# When logging_collector is enabled, this parameter determines the
#     maximum size of an individual log file.
# After this many kilobytes have been emitted into a log file, a new log file will be created.
# Set to zero to disable size-based creation of new log files.
log_rotation_size = 0

log_truncate_on_rotation = on


#syslog_facility =
#syslog_ident =
#event_source =


# ################################################################################
# 18.8.2. WHEN TO LOG
#
# Controls which message levels are sent to the client.
# Valid values are DEBUG5, DEBUG4, DEBUG3, DEBUG2, DEBUG1, LOG, NOTICE, WARNING, ERROR, FATAL, and PANIC.
# Each level includes all the levels that follow it.
# The later the level, the fewer messages are sent.
# The default is NOTICE.
# Note that LOG has a different rank here than in log_min_messages.
client_min_messages = NOTICE
#client_min_messages = LOG

# Controls which message levels are written to the server log.
# Valid values are DEBUG5, DEBUG4, DEBUG3, DEBUG2, DEBUG1, INFO, NOTICE, WARNING, ERROR, LOG, FATAL, and PANIC.
# Each level includes all the levels that follow it.
# The later the level, the fewer messages are sent to the log.
# The default is WARNING.
# Note that LOG has a different rank here than in client_min_messages.
#log_min_messages = WARNING
log_min_messages = NOTICE

# Controls which SQL statements that cause an error condition are recorded in the server log.
# The current SQL statement is included in the log entry for any message of the specified severity or higher.
# Valid values are DEBUG5, DEBUG4, DEBUG3, DEBUG2, DEBUG1, INFO, NOTICE, WARNING, ERROR, LOG, FATAL, and PANIC.
# The default is ERROR, which means statements causing errors, log messages, fatal errors, or panics will be logged.
# To effectively turn off logging of failing statements, set this parameter to PANIC.
log_min_error_statement = WARNING

# Causes the duration of each completed statement to be logged if the statement ran for
# at least the specified number of milliseconds. Setting this to zero prints all statement durations.
# Minus-one (the default) disables logging statement durations.
# For example, if you set it to 250ms then all SQL statements that run 250ms or longer will be logged.
# Enabling this parameter can be helpful in tracking down unoptimized queries in your applications.
# For clients using extended query protocol, durations of the Parse, Bind, and Execute steps are logged independently.
#log_min_duration_statement = -1
log_min_duration_statement = 15000
#log_min_duration_statement = 0

# ################################################################################
# 18.8.3. WHAT TO LOG
#
# These parameters enable various debugging output to be emitted.
# When set, they print the resulting parse tree, the query rewriter output, or the execution plan
# for each executed query.
# These messages are emitted at LOG message level, so by default they will appear in the server log
# but will not be sent to the client.
# You can change that by adjusting client_min_messages and/or log_min_messages.
# These parameters are off by default.
#debug_print_parse = off
#debug_print_rewritten = off
#debug_print_plan = off

# When set, debug_pretty_print indents the messages produced by
# debug_print_parse, debug_print_rewritten, or debug_print_plan.
# This results in more readable but much longer output than the "compact" format used when it is off.
# It is on by default.
#debug_pretty_print = on

# Causes checkpoints and restartpoints to be logged in the server log.
# Some statistics are included in the log messages, including the number of buffers written and
# the time spent writing them.
# The default is off.
#log_checkpoints = off

# Causes each attempted connection to the server to be logged,
# as well as successful completion of client authentication.
# The default is off.
log_connections = yes

# Causes session terminations to be logged.
# The log output provides information similar to log_connections, plus the duration of the session.
# The default is off.
log_disconnections = on

# Causes the duration of every completed statement to be logged.
# The default is off.
log_duration = on

# Controls the amount of detail written in the server log for each message that is logged.
# Valid values are TERSE, DEFAULT, and VERBOSE, each adding more fields to displayed messages.
# TERSE excludes the logging of DETAIL, HINT, QUERY, and CONTEXT error information.
# VERBOSE output includes the SQLSTATE error code (see also Appendix A)
# and the source code file name, function name, and line number that generated the error.
#log_error_verbosity = VERBOSE

# By default, connection log messages only show the IP address of the connecting host.
# Turning this parameter on causes logging of the host name as well.
# Note that depending on your host name resolution setup this might impose a non-negligible performance penalty.
#log_hostname = on

# This is a printf-style string that is output at the beginning of each log line.
# % characters begin "escape sequences" that are replaced with status information as outlined below.
# Unrecognized escapes are ignored. Other characters are copied straight to the log line.
# Some escapes are only recognized by session processes, and will be treated as empty by background processes
# such as the main server process.
# Status information may be aligned either left or right by specifying a numeric literal after the % and
# before the option.
# A negative value will cause the status information to be padded on the right with spaces to
# give it a minimum width, whereas a positive value will pad on the left.
# Padding can be useful to aid human readability in log files.
# The default is an empty string.
# seems to be ignored by 'csvoutput'
log_line_prefix = '%m\t%c\t%p\t%v\t'

# Controls whether a log message is produced when a session waits longer than deadlock_timeout to acquire a lock.
# his is useful in determining if lock waits are causing poor performance.
# The default is off.
log_lock_waits = on

# Controls which SQL statements are logged.
# Valid values are none (off), ddl, mod, and all (all statements).
#    ddl logs all data definition statements, such as CREATE, ALTER, and DROP statements.
#    mod logs all ddl statements, plus data-modifying statements such as INSERT, UPDATE, DELETE, TRUNCATE, and COPY FROM. PREPARE, EXECUTE, and EXPLAIN ANALYZE statements are also logged if their contained command is of an appropriate type.
# The default is none.
#log_statement = ddl

# Causes each replication command to be logged in the server log.
# See Section 50.3 for more information about replication command.
# The default value is off.
#log_replication_commands = on

# Controls logging of temporary file names and sizes.
# Temporary files can be created for sorts, hashes, and temporary query results.
# A log entry is made for each temporary file when it is deleted.
# A value of zero logs all temporary file information,
# while positive values log only files whose size is greater than or equal to the specified number of kilobytes.
# The default setting is -1, which disables such logging.
#log_temp_files = -1
log_temp_files = 131072
#log_temp_files = 0

# Sets the time zone used for timestamps written in the server log.
# Unlike TimeZone, this value is cluster-wide, so that all sessions will report timestamps consistently.
# The built-in default is GMT, but that is typically overridden in postgresql.conf;
# initdb will install a setting there corresponding to its system environment.
# See Section 8.5.3 for more information.
log_timezone = UTC

